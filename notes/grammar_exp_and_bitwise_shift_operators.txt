    /* Grammar for Lox language
    *  Grammar Exponentiation and Bitwise Shift operators
    * Date: dimanche, 16/06/19 
    *
    * program     → declaration* EOF ;
    *
    * declaration → classDecl
    *       | funDecl
    *       | VarDecl
    *       | statement ;
    *
    * classDecl → "class" IDENTIFIER ( "<" IDENTIFIER )?
    *        "{" function* "}" ;
    *
    * funDecl  → "fun" function ;
    *
    * function → IDENTIFIER "(" functionBody ")" ;
    *
    * functionBody → "(" parameters? ")" block ;
    *
    * parameters → IDENTIFIER ( "," IDENTIFIER )* ;
    *
    * varDecl → "var" IDENTIFIER ( "=" expression )? ";" ;
    *
    * statement → exprStmt
    *           | forStmt
    *           | ifStmt
    *           | printStmt
    *           | returnStmt
    *           | whileStmt
    *           | breakStmt
    *           | continueStmt
    *           | block ;
    *
    * exprStmt  → expression ";" ;
    *
    *  forStmt   → "for" "(" ( varDecl | exprStmt | ";" )
    *                  ( expression )? ";"
    *                  ( expression )? ")" statement ;
    *
    * ifStmt    → "if" "(" expression ")" statement ( "else" statement )? ;
    *
    * printStmt → "print" expression ";" ;
    *
    * returnStmt → "return" expression? ";" ;
    *
    * whileStmt → "while" "(" expression ")" statement ;
    *
    * breakStmt → "break" ";" 
    *             | "continue" ";" ;
    *
    * continueStmt → "continue" ";" ;
    *
    * block     → "{" declaration* "}" ;
    *
    * expression → comma ;
    *
    * comma → assignment ( "," assignment )* ;
    *
    * assignment → ( call "." )? identifier "=" assignment
    *       | conditional
    *       | compoundAssignment ;
    *
    * compoundAssignment → identifier ( "+=" | "-=" | "*=" | "/=" | "%=" 
    *                               | "&=" | "|=" | "^="
    *                               | "**=" | "<<=" | ">>=" ) expression ;
    *
    * conditional : logicOr "?" expression ":" conditional;
    *
    * logicOr   → logicAnd ( "or" logicAnd )* ;
    *
    * logicAnd  → bitwiseOr ( "and" bitwiseOr )* ;
    *
    * bitwiseOr → bitwiseXor ( ( "|" ) )* bitwiseXor ;
    *
    * bitwiseXor → bitwiseAnd ( ( "^" ) )* bitwiseAnd ;
    *
    * bitwiseAnd → equality ( ( "&" ) )* equality ;
    *
    * equality → comparison ( ( "!=" | "==" ) comparison )* ;
    * 
    * comparison → bitwiseShift ( ( ">" | ">=" | "<" | "<=" ) bitwiseShift )* ;
    *
    * bitwiseShift → addition ( ( "<<" | ">>" ) addition )* ;
    * 
    * addition → multiplication ( ( "+" | "-" ) multiplication )* ;
    *
    * multiplication → modulo ( ( "/" | "*" ) modulo )* ;
    *
    * modulo → exponentiation ( ( "%" ) exponentiation )* ;
    *
    * exponentiation → unary ( ( "**" ) unary )* ;
    * 
    * unary → ( "!" | "-" | "+" | "~") unary | call ;
    *
    * call → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
    *
    * primary → "true" | "false" | "nil"
    *      | NUMBER | STRING
    *        | "(" expression ")"
    *        | this
    *        | IDENTIFIER
    *        | lambda
    *        | "super" "." IDENTIFIER ;
    *
    * arguments → assignment ( "," assignment )* ;
    *
    * */
